// import { it } from "node:test";
import { Ship } from "./main.js";

// test plan - already written two functions with code so do like that for now.
// following tests - write 'stub' functions first (look into this) and then test them. They'll fail at first, write the code to make them pass. Maybe research tdd and stub functions

const testMotherShip = new Ship("Mother Ship", "Mother Ship", 9, 100);
const testDefenceShip = new Ship("Test Ship", "Defence Ship", 10, 80);
const testAttackShip = new Ship("Attack Ship 1", "Attack Ship", 12, 45);

let ship1;
let ship2;
let ship3;
let ship4;
let ship5;
let ship6;
let ship7;
let ship8;
let ship9;
let ship10;
let ship11;
let ship12;
let ship13;
let ship14;

describe("shoot method test", () => {
  it("should return a number that is less than 14 when 14 items are inputted", () => {
    const largeShipsArr = [
      ship1,
      ship2,
      ship3,
      ship4,
      ship5,
      ship6,
      ship7,
      ship8,
      ship9,
      ship10,
      ship11,
      ship12,
      ship13,
      ship14,
    ];
    const output = testDefenceShip.shoot(largeShipsArr);
    expect(output).toBeLessThan(14);
    expect(output).toBeGreaterThan(0);
  });
  it("should return a number that is less than 9 when 9 items are inputted", () => {
    const smallShipsArr = [
      ship1,
      ship2,
      ship3,
      ship4,
      ship5,
      ship6,
      ship7,
      ship8,
      ship9,
    ];
    const output = testDefenceShip.shoot(smallShipsArr);
    expect(output).toBeLessThan(9);
    expect(output).toBeGreaterThan(0);
  });
  it("should return as 'null' if the input is an empty array", () => {
    const emptyShipsArr = [];
    output = testDefenceShip.shoot(emptyShipsArr);
    expect(output).toBe(null);
  });
});

describe("hit method test", () => {
  it("should reduce the mothership score by 9, returning a score of 91", () => {
    const score = testMotherShip.hit(0); // input is a random number generated by previous function. I don't believe invoking the function on 'testMotherShip' should make any difference - it could be a different type of ship I want to hit. In this scenario, I'll just select where it is in the array (pos. 0) - CHECK this is a good way to go about this test.
    expect(score).toBe(91); // number input in main file determined by result of 'shoot' method.
  });
  it("should reduce the defence ship score by 10, returning a score of 70", () => {
    const score = testDefenceShip.hit(1);
    expect(score).toBe(70);
  });
  it("should reduce the attack ship score by 12, returning a score of 33", () => {
    const score = testAttackShip.hit(6);
    expect(score).toBe(33);
  });
});

// how do we test if it is working with an updated score (e.g. already been reduced)

// do some for if score is 0?
